#include<unistd.h>
#include<sys/syscall.h>
#include<string.h>
#include<stdio.h>
#include<time.h>

#define NR_PROC 10

int main() {
        int i;
        for(i = 1; i <= NR_PROC; ++i) {
                pid_t pid = fork();
                if(pid < 0) {
                        printf("Eroare la fork!\n");
                        return -1;
                } else if(pid == 0) {
                        srand(time(0));
                        int id = rand() % 10;

                        syscall(333, id);
                        printf("Procesul %d asteapta dupa evenimentul: %d\n", getpid(), id);
                        syscall(335, id);
                        printf("Procesul %d a terminat de asteptat dupa evenimentul %d\n", getpid(), id);
                        syscall(334, id);
                        return 0;
                }
        }

        for(i = 1; i <= NR_PROC; ++i) {
                pid_t child_pid = wait(NULL);
                printf("Am asteptat dupa copilul %d\n", child_pid);
        }

        printf("S-au terminat toate procesele de asteptat!\n");
        return 0;
}
