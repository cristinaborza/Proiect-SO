#include<unistd.h>
#include<stdio.h>
#include<sys/syscall.h>

struct pair {
        int x;
        int y;
};

struct pair edges[10];

int main() {
        int nr_proc = 0;
        printf("Introduceti numarul de procese copil: ");
        scanf("%d", &nr_proc);

        int m = 0;
        printf("Introduceti numarul de dependete: ");
        scanf("%d", &m);

        printf("Introduceti dependetele:\n");
        int i;
        for(i = 1; i <= m; ++i) {
                int x, y;
                scanf("%d %d", &x, &y);
                edges[i - 1] =(struct pair){x, y};
        }

        for(i = 1; i <= nr_proc; ++i) {
                syscall(333, i);
        }

        for(i = 1; i <= nr_proc; ++i) {
                pid_t pid = fork();
                if(pid < 0) {
                        printf("Eroare la fork!\n");
                } else if(pid == 0) {
                        int j;
                        for(j = 0; j < m; ++j) {
       			 	if(edges[j].x == i) {
                                        //printf("Copilul %d asteapta dupa  %d\n",edges[j].x, edges[j].y);
                                        syscall(335, edges[j].y);
                                }
                        }

                        sleep(3);
                        printf("Am executat copilul %d\n", i);
                        syscall(336, i);
                        return 0;
                }
        }

        for(i = 1; i <= nr_proc; ++i) {
                wait(NULL);
        }

        for(i = 1; i <= nr_proc; ++i) {
                syscall(334, i);
	}

        printf("Am terminat de executat toate procesele!\n");
        return 0;
}

