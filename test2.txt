#include<unistd.h>
#include<stdio.h>
#include<sys/syscall.h>
#include<time.h>

#define NR_PROC 10

int main() {
        int i;
        for(i = 1; i <= NR_PROC; ++i) {
                pid_t pid = fork();
                if(pid < 0) {
                        printf("Eroare la fork!\n");
                        return -1;
                } else if(pid == 0) {
                        srand(time(0));

                        syscall(333, 1);
                        syscall(335, 1);

                        int nr_sec = rand() % 5 + 1;
                        sleep(nr_sec);
                        printf("S-a terminat de executat secventa 1 din procesul %d\n", getpid());

                        syscall(333, 2);
                        syscall(335, 2);

                        nr_sec = rand() % 5 + 1;
                        sleep(nr_sec);
                        printf("S-a terminat de executat secventa 2 din procesul %d\n", getpid());

                        syscall(334, 2);
                        syscall(334, 1);
                        return 0;
                }
        }
	
	for(i = 1; i <= NR_PROC; ++i) {
                pid_t child_pid = wait(NULL);
                printf("Am asteptat dupa copilul %d\n", child_pid);
        }

        printf("Am terminat de asteptat!");
        return 0;
}

